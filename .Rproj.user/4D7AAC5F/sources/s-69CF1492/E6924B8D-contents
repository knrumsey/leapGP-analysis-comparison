library(tictoc)
library(quack)
library(BASS)
library(BART)
library(laGP)
library(fasterize)
library(RColorBrewer)
library(lhs)


load("surge_data_reduced_long.rda")
rr <- apply(data, 2, range)

Y <- data$surge
X <- data[,-1]

#' SIMULATED ANNEALING TYPE PROBLEM
#'   we want to explore the whole space, but with an emphasis on the contour
#'   with surge = 6.5 = alpha. We use an annealing based approach to create new
#'   prediction locations.
#'     theta_t = theta_{t-1} + epsilon * (theta_star)
#'     theta_star = random point in par space
#'
#'   acceptance probability is defined by
#'      e_t = |g(theta_t) - alpha|, e_t-1 = |g(theta_{t-1}) - alpha|
#'      exp(-(e_t - e_t-1)/T)
#'      where T \sim folded t(df=3)
gen_theta <- function(){
  c(sapply(1:5, function(zz) runif(1, rr[1,1+zz], rr[2,1+zz])), unlist(X[sample(nrow(X), 1), c("x", "y")]))
}

theta <- gen_theta()

# LA-GP (takes about 37 seconds per prediction)
tic()
la <- laGP(matrix(theta, nrow=1), start=30, end=200, X=X, Z=Y)
toc <- toc()


# LeapGP
tic()
leap <- leapGP_build(X, Y, H=500, start=30, n=200, verbose=TRUE)
toc2 <- toc()



for(i in 1:1000){
  leapGP_predict(leap, gen_theta())
}




# Synchronize
leap2 <- leapGP_synch(leap, rho=0.8)

tic()
hubs <- leap2$hubs
emulator <- slapGP(theta, X, Y, hubs=hubs, rho=0.8, start=30, n=200)
hubs <- emulator$hubs
toc3 <- toc()





